import asyncio
from contextlib import suppress
import logging
from typing import Dict, TypedDict

from aiogram import Router, types, F, Bot
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import fsm
from bot.api import BackendAPI
from config import ENV
from services.storage import YandexS3Storage
from utils.progress import PROGRESS, show_progress


router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)
storage = YandexS3Storage()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def start_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_photo")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy_coins")
    kb.button(text="–ß—Ç–æ —É–º–µ—é?", callback_data="help")
    kb.button(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{env.SUPPORT_USERNAME}")
    kb.adjust(1, 1, 1, 2)
    return kb.as_markup()

def help_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_photo")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy_coins")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.button(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{env.SUPPORT_USERNAME}")
    kb.adjust(1, 1, 1, 2)
    return kb.as_markup()

def prompt_options_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="prompt_edit")
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="prompt_accept")
    kb.button(text="‚Üª –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="prompt_other")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="prompt_reject")
    kb.adjust(2)
    return kb.as_markup()

def aspect_ratio_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="aspect_16_9")
    kb.button(text="9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="aspect_9_16")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.adjust(1, 1, 2)
    return kb.as_markup()

def sent_prompt_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="repeat_generation")
    kb.button(text="üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_generation")
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_back")
    kb.adjust(1, 1, 1)
    return kb.as_markup()


# --- –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ ---

@router.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    nickname = message.from_user.username
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    await backend.ensure_user(str(user_id), nickname)
    coins = await backend.get_coins(user_id)

    await state.clear()
    sent = await message.answer(
        f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
        reply_markup=start_keyboard()
    )
    await state.update_data(start_message_id=sent.message_id)
    await state.set_state(fsm.BotState.start_message_id)

@router.callback_query(F.data == "start_back")
async def back_to_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    user_id = callback.from_user.id
    coins = await backend.get_coins(user_id)
    sent = await callback.message.answer(
        f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
        reply_markup=start_keyboard()
    )
    await state.update_data(start_message_id=sent.message_id)
    await state.set_state(fsm.BotState.start_message_id)

# --- –ú–µ–Ω—é –ø–æ–º–æ—â–∏ ---

@router.callback_query(F.data == "help")
async def help_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    text = (
        "–Ø¬†‚Äî –û–±—ä–µ–∫—Ç–∏–≤–µ–æ3. –ß—Ç–æ —É–º–µ—é:\n"
        "‚Ä¢ üé¨ –í–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É ‚Äî –æ–ø–∏—à–∏ –∫—Ç–æ/—á—Ç–æ/–≥–¥–µ/—Å—Ç–∏–ª—å.\n"
        "‚Ä¢ üñº –û–∂–∏–≤–ª—è—é —Ñ–æ—Ç–æ ‚Äî –º–∏–º–∏–∫–∞/–¥–≤–∏–∂–µ–Ω–∏–µ/–∫–∞–º–µ—Ä–∞.\n"
        "‚Ä¢ üé® –í —Å—Ç–∏–ª–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä—é –≤–∞–π–± –∏ —Ü–≤–µ—Ç.\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
        "‚Ä¢ üé§ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º.\n"
        "‚Ä¢ üß† –£—Ç–æ—á–Ω—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ ChatGPT –∏ —Å–æ–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è VEO3.\n"
        "‚Ä¢ üìê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: 9:16 / 16:9 / 1:1"
    )
    await callback.message.answer(text, reply_markup=help_keyboard())

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É ---

@router.callback_query(F.data == "generate_by_text")
async def callback_generate_by_text(callback: types.CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    start_msg_id = data.get("start_message_id")
    if start_msg_id:
        with suppress(Exception):
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=start_msg_id)
    await callback.answer()
    await callback.message.answer("–®–∞–≥‚ÄØ2/3. –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ä–æ–ª–∏–∫–µ?", reply_markup=InlineKeyboardBuilder().button(text="–ù–∞–∑–∞–¥", callback_data="start_back").as_markup())
    await state.update_data(mode="text")
    await state.set_state(fsm.BotState.waiting_for_text_description)

@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    brief = (message.text or "").strip()
    if not brief:
        await message.answer("–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å—é–∂–µ—Ç –±—É–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ.")
        return

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
    progress_task = asyncio.create_task(show_progress(message.bot, message.chat.id, progress_msg.message_id, stage="prompt"))

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=brief,
            clarifications=None,
            attempt=1,
            previous_prompt=None,
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
            

    await state.update_data(
        prompt_brief=brief,
        prompt_last=en_text,
        prompt_attempt=1,
        prompt_clarifications=[],
        mode="text"
    )
    await progress_msg.edit_text(f"`{ru_text}`", parse_mode="Markdown", reply_markup=prompt_options_kb())
    await state.set_state(fsm.PromptAssistantState.reviewing)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ ---

@router.callback_query(F.data == "generate_photo")
async def start_photo_flow(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await state.update_data(mode="photo")
    await callback.message.answer("–®–∞–≥‚ÄØ2/3. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–ø–æ–¥–ø–∏—Å—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞).", reply_markup=InlineKeyboardBuilder().button(text="–ù–∞–∑–∞–¥", callback_data="start_back").as_markup())
    await state.set_state(fsm.PhotoState.waiting_photo)

@router.message(fsm.PhotoState.waiting_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    file = await message.bot.get_file(photo_id)
    file_bytes = await message.bot.download_file(file.file_path)

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
    image_url = storage.save(file_bytes.getvalue(), extension=".jpg", prefix="prompt_inputs/")
    await state.update_data(image_url=image_url, prompt_attempt=1, prompt_clarifications=[])

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –∏ —Å–æ–±–∏—Ä–∞—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
    progress_task = asyncio.create_task(show_progress(message.bot, message.chat.id, progress_msg.message_id, stage="prompt"))

    try:
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–≤ image_url –≤ backend
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=message.caption or "",
            clarifications=None,
            attempt=1,
            previous_prompt=None,
            image_url=image_url,
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —Ñ–æ—Ç–æ: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
            

    await state.update_data(prompt_last=en_text)
    await progress_msg.edit_text(f"`{ru_text}`", parse_mode="Markdown", reply_markup=prompt_options_kb())
    await state.set_state(fsm.PromptAssistantState.reviewing)

# --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º (–æ–±—â–∞—è) ---

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_accept")
async def prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
    await callback.message.answer("–®–∞–≥‚ÄØ3/3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ:", reply_markup=aspect_ratio_kb())

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_other")
async def prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief") or ""
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–æ—Ç—É—Ö
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç‚Ä¶", show_alert=False)

    # —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await callback.message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç‚Ä¶")

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    progress_task = asyncio.create_task(
        show_progress(callback.bot, callback.from_user.id, progress_msg.message_id, stage="prompt")
    )

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(callback.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last,
            # aspect_ratio="16:9",
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: %s", e)
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
            

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(prompt_last=en_text, prompt_attempt=attempt)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    await progress_msg.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n`{ru_text}`",
        parse_mode="Markdown",
        reply_markup=prompt_options_kb()
    )


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_edit")
async def prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å:")
    await state.set_state(fsm.PromptAssistantState.editing)

@router.message(fsm.PromptAssistantState.editing)
async def prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É.")
        return

    data = await state.get_data()
    brief = data.get("prompt_brief") or ""
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä
    progress_msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫‚Ä¶")
    progress_task = asyncio.create_task(
        show_progress(message.bot, message.chat.id, progress_msg.message_id, stage="prompt")
    )

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∫–∞–º–∏: %s", e)
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
            

    # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(prompt_clarifications=clar, prompt_last=en_text, prompt_attempt=attempt)
    # –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    await progress_msg.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n`{ru_text}`",
        parse_mode="Markdown",
        reply_markup=prompt_options_kb()
    )
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
    await state.set_state(fsm.PromptAssistantState.reviewing)

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_reject")
async def prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.message.answer("–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")

# --- –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data.startswith("aspect_"))
async def aspect_ratio_chosen(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    if not prompt_text:
        await callback.message.answer("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    aspect_ratio = "16:9" if callback.data == "aspect_16_9" else "9:16"
    mode = data.get("mode")

    try:
        if mode == "photo":
            image_url = data.get("image_url")
            if not image_url:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                return
            task = await backend.generate_photo(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                image_url=image_url,
                aspect_ratio=aspect_ratio,
            )
        else:
            task = await backend.generate_text(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                aspect_ratio=aspect_ratio,
            )

        task_id = task["task_id"]
        coins = await backend.get_coins(callback.from_user.id)
        await callback.message.answer(
            f"üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n–û—Å—Ç–∞—Ç–æ–∫: {coins}.\n"
            "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
            "–°–¥–µ–ª–∞—Ç—å –µ—â—ë?",
            reply_markup=sent_prompt_kb()
        )
        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
        progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
        progress_task = asyncio.create_task(show_progress(callback.bot, callback.from_user.id, progress_msg.message_id, stage="video"))
        PROGRESS[task_id] = {
            "task": progress_task,
            "chat_id": callback.message.chat.id,
            "message_id": progress_msg.message_id,
        }
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
                
# --- –ü–æ–≤—Ç–æ—Ä –∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---

@router.callback_query(F.data == "repeat_generation")
async def on_repeat_generation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    mode = data.get("mode")
    if not prompt_text:
        await callback.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True)
        return

    # –ø–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–µ–º –∂–µ aspect_ratio (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)
    aspect_ratio = "16:9"
    try:
        if mode == "photo":
            image_url = data.get("image_url")
            task = await backend.generate_photo(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                image_url=image_url,
                aspect_ratio=aspect_ratio,
            )
        else:
            task = await backend.generate_text(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                aspect_ratio=aspect_ratio,
            )
        await callback.message.answer(
            f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!",
            parse_mode="Markdown"
        )
        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
        progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
        progress_task = asyncio.create_task(show_progress(callback.bot, callback.from_user.id, progress_msg.message_id, stage="video"))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä.")
    finally:
        # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        with suppress(Exception):
            progress_task.cancel()
            with suppress(asyncio.CancelledError):
                await progress_task
        

@router.callback_query(F.data == "new_generation")
async def on_new_generation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
        reply_markup=start_keyboard()
    )




@router.callback_query(F.data.startswith("rate:"))
async def on_rate(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, task_id, rating_str = callback.data.split(":")
        rating = int(rating_str)
        if rating < 1 or rating > 5:
            raise ValueError("rating must be 1-5")
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏", show_alert=True)
        return

    try:
        await backend.rate_task(task_id, rating)
        await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {"‚≠ê" * rating}!", show_alert=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", show_alert=True)