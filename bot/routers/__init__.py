import asyncio
from typing import Optional
from aiogram import Router, types, F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.context import FSMContext
from bot import fsm
from bot.api import BackendAPI
from config import ENV
from services.kie import GenerateRequests

router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)


def start_keyboard():
    kb = [
        [
            types.InlineKeyboardButton(
                text="üìΩÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
        ],
        [
            types.InlineKeyboardButton(
                text="üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_by_photo")
        ]
    ]
    inline_kb = types.InlineKeyboardMarkup(inline_keyboard=kb)
    return inline_kb


@router.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        exists = await backend.check_user_exist(message.from_user.id)
    except Exception:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∞–µ–º
    if not exists:
        # –ë–∞–Ω–Ω–µ—Ä
        await message.answer_photo(
            photo=types.URLInputFile(
                "https://storage.yandexcloud.net/veobot/photo_2025-08-12_00-07-56.jpg"),
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        )

        await message.answer("–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶")
        nickname = (
            message.from_user.username
            or message.from_user.first_name
            or f"user_{message.from_user.id}"
        )
        try:
            res = await backend.register_user(message.from_user.id, nickname=nickname)
        except Exception:
            await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

        if not res.get("created", False) and res.get("reason") != "exists":
            await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

    # –û–±—â–∞—è –≤–µ—Ç–∫–∞ –ø–æ—Å–ª–µ ensure user: –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—ë–º –º–µ–Ω—é
    try:
        coins = await backend.get_coins(message.from_user.id)
    except Exception:
        coins = 0  # –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º UX

    if not exists:
        text = (
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ!\n\n"
            f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )
    else:
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )

    sent_message: Optional[types.Message] = await message.answer(
        text,
        reply_markup=start_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(start_message_id=sent_message.message_id)
    await state.set_state(fsm.BotState.start_message_id)


@router.callback_query(F.data == "generate_by_text")
async def callback_generate_by_text(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    chat_id = callback.message.chat.id
    await callback.bot.delete_message(chat_id=chat_id, message_id=start_message_id)
    await callback.answer()
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ:")
    await state.set_state(fsm.BotState.waiting_for_text_description)


@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    text = message.text
    success = False
    await message.answer(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{text}")
    generate = GenerateRequests()
    data = await generate.generate_video_by_text(text)
    print(data)

    if data["code"] == 200:
        while not success:
            result = await generate.get_video_info(data["data"]["taskId"])
            print(result)
            print("-------------------------------------------")

            if result["data"]["successFlag"] == 1:
                success = True
                video = types.URLInputFile(
                    result['data']['response']['resultUrls'][0])
                await message.answer_video(video, caption=text, show_caption_above_media=True)
            else:
                pass
            await asyncio.sleep(3)


@router.message(Command("test"))
async def test_details(message: types.Message, command: CommandObject):
    args = command.args
    generate = GenerateRequests()
    if args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    req = await generate.get_video_info(args.replace(" ", ""))
    print(req)
