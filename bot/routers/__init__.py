import asyncio
from contextlib import suppress
import json
import logging
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import fsm
from bot.api import BackendAPI
from config import ENV, Settings
from services.redis import RedisClient
from services.storage import YandexS3Storage
from utils.progress import PROGRESS, show_progress
from aiogram.enums import ParseMode
from utils.referral import ReferralService


router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)
storage = YandexS3Storage()
redis = RedisClient()
settings = Settings()
referral_service = ReferralService()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def start_keyboard(chat_id: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_photo")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="select_pay_method")
    kb.button(text="–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="partner")
    kb.button(text="–ß—Ç–æ —É–º–µ—é?", callback_data="help")
    kb.button(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{env.SUPPORT_USERNAME}")
    if chat_id in settings.get_admins_chat_id():
        kb.button(text="–ü–∞–Ω–µ–ª—å –∞–Ω–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", web_app=types.WebAppInfo(url=env.ADMIN_SITE))
    kb.adjust(1, 1, 1, 1, 2, 1)
    return kb.as_markup()


def help_keyboard(chat_id: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_photo")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="select_pay_method")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.button(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{env.SUPPORT_USERNAME}")
    if chat_id in settings.get_admins_chat_id():
        kb.button(text="–ü–∞–Ω–µ–ª—å –∞–Ω–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", web_app=types.WebAppInfo(url=env.ADMIN_SITE))
    kb.adjust(1, 1, 1, 2, 1)
    return kb.as_markup()


def prompt_options_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å / –î–æ–±–∞–≤–∏—Ç—å", callback_data="prompt_edit")
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="prompt_accept")
    kb.button(text="‚Üª –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="prompt_other")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="prompt_reject")
    kb.adjust(2)
    return kb.as_markup()


def aspect_ratio_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="aspect_16_9")
    kb.button(text="9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="aspect_9_16")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.adjust(1, 1, 2)
    return kb.as_markup()


def sent_prompt_kb(task_id: str) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
              callback_data=f"repeat_generation:{task_id}")
    kb.button(text="üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_generation")
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_back")
    kb.adjust(1, 1, 1)
    return kb.as_markup()


async def _stop_task(task: asyncio.Task | None):
    if task:
        task.cancel()
        with suppress(asyncio.CancelledError):
            await task


# --- –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ ---

@router.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        exists = await backend.check_user_exist(message.from_user.id)
    except Exception:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∞–µ–º
    if not exists:
        # –ë–∞–Ω–Ω–µ—Ä
        await message.answer_photo(
            photo=types.URLInputFile(
                "https://storage.yandexcloud.net/veobot/photo_2025-08-12_00-07-56.jpg"),
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        )

        await message.answer("–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶")
        nickname = (
            message.from_user.username
            or message.from_user.first_name
            or f"user_{message.from_user.id}"
        )
        try:
            # Handle referral link
            referral_payload = None
            command_args = message.text.split()
            if len(command_args) > 1:
                encoded_token = command_args[1]
                referral_payload = referral_service.decode_and_validate_token(encoded_token)
                if not referral_payload:
                    logging.warning(f"Invalid or expired referral token used by chat_id {message.from_user.id}")

            # Prepare registration data for the backend
            registration_data = {
                "chat_id": str(message.from_user.id),
                "nickname": nickname,
            }
            if referral_payload:
                registration_data["referrer_type"] = referral_payload.get("t")
                registration_data["referrer_id"] = referral_payload.get("rid")
                registration_data["ref_link_id"] = referral_payload.get("lid")

            res = await backend.register_user(**registration_data)
        except Exception:
            await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

        if not res.get("created", False) and res.get("reason") != "exists":
            await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

    # –û–±—â–∞—è –≤–µ—Ç–∫–∞ –ø–æ—Å–ª–µ ensure user: –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—ë–º –º–µ–Ω—é
    try:
        coins = await backend.get_coins(message.from_user.id)
    except Exception:
        coins = 0  # –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º UX

    if not exists:
        text = (
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ!\n\n"
            f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:"
        )
    else:
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            "–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ::"
        )

    sent_message: Optional[types.Message] = await message.answer(
        text,
        reply_markup=start_keyboard(message.from_user.id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(start_message_id=sent_message.message_id)
    await state.set_state(fsm.BotState.start_message_id)


@router.callback_query(F.data == "start_back")
async def back_to_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    user_id = callback.from_user.id
    coins = await backend.get_coins(user_id)
    sent = await callback.message.answer(
        f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
        reply_markup=start_keyboard(user_id)
    )
    await state.update_data(start_message_id=sent.message_id)
    await state.set_state(fsm.BotState.start_message_id)


# --- –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---

def partner_cabinet_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –î–∞—à–±–æ—Ä–¥", callback_data="partner:dashboard")
    kb.button(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="partner:links")
    kb.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", callback_data="partner:commissions")
    kb.button(text="üí∞ –í—ã–ø–ª–∞—Ç—ã", callback_data="partner:payouts")
    kb.button(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_back")
    kb.adjust(2, 2, 1)
    return kb.as_markup()

@router.callback_query(F.data == "partner")
async def partner_program_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    try:
        user_roles = await backend.get_user_roles(user_id)
        is_partner = "partner" in user_roles
        if is_partner:
            await partner_dashboard_handler(callback, state) # Go directly to dashboard
        else:
            await show_user_referral_info(callback, user_id)
    except Exception as e:
        logging.error(f"Failed to load partner program data for user {user_id}: {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_user_referral_info(callback: types.CallbackQuery, user_id: int):
    link_data = await backend.get_user_referral_link(user_id)
    stats_data = await backend.get_user_referral_stats(user_id)
    link = link_data.get("url", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")
    stats = stats_data
    text = (
        "üéâ **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ **1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** –∫–∞–∂–¥—ã–π "
        "–ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏!\n\n"
        "üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
        f"`{link}`\n\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"  - –î—Ä—É–∑–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: **{stats.get('registrations', 0)}**\n"
        f"  - –°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É: **{stats.get('first_purchases', 0)}**\n"
        f"  - –ë–æ–Ω—É—Å–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: **{stats.get('bonuses_earned', 0)}** –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode=ParseMode.MARKDOWN)

@router.callback_query(F.data == "partner:dashboard")
async def partner_dashboard_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    try:
        dashboard_data = await backend.get_partner_dashboard(user_id)
        text = (
            "**üóÑÔ∏è –ö–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞**\n\n"
            f"**–ë–∞–ª–∞–Ω—Å:**\n"
            f"  - –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: **{dashboard_data.get('balance_available', 0) / 100:.2f} ‚ÇΩ**\n"
            f"  - –í —Ö–æ–ª–¥–µ: **{dashboard_data.get('balance_hold', 0) / 100:.2f} ‚ÇΩ**\n\n"
            f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"  - –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: **{dashboard_data.get('total_registrations', 0)}**\n"
            f"  - –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: **{dashboard_data.get('total_sales', 0) / 100:.2f} ‚ÇΩ**\n"
            f"  - –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: **{dashboard_data.get('total_earned', 0) / 100:.2f} ‚ÇΩ**"
        )
        await callback.message.edit_text(text, reply_markup=partner_cabinet_kb(), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"Failed to load partner dashboard for user {user_id}: {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—à–±–æ—Ä–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Placeholders for other partner cabinet features
@router.callback_query(F.data == "partner:links")
async def partner_links_placeholder(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@router.callback_query(F.data == "partner:commissions")
async def partner_commissions_placeholder(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@router.callback_query(F.data == "partner:payouts")
async def partner_payouts_placeholder(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# --- –ú–µ–Ω—é –ø–æ–º–æ—â–∏ ---


@router.callback_query(F.data == "help")
async def help_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    text = (
        "–Ø ‚Äî –û–±—ä–µ–∫—Ç–∏–≤–µ–æ 3. –ß—Ç–æ —É–º–µ—é\n\n"

        "üé¨ –í–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "–ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ. –Ø —Å–∞–º –ø—Ä–µ–≤—Ä–∞—â—É —Ç–µ–∫—Å—Ç –≤ —Ç–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Å–∫–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–º—ë—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª ‚Äî –¥–µ–ª–∞—é –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ—Ñ-—Ä–æ–ª–∏–∫.\n"
        "–ü—Ä–æ–º–ø—Ç –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n"

        "üñºÔ∏è –û–∂–∏–≤–ª—è—é —Ñ–æ—Ç–æ\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–¥—Ä–µ (–¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–±—ã—Ç–∏—è, –º–∏–º–∏–∫–∞/—ç–º–æ—Ü–∏–∏, –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã, —Å–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã). –Ø –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–æ–º–ø—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–º—ë—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª ‚Äî –ø–µ—Ä–µ—Ö–æ–∂—É –∫ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—é –∫–∞–¥—Ä–∞ –≤ –≤–∏–¥–µ–æ.\n\n"

        "‚ú® –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É (—á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ)\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ¬ª, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏—Ç–µ. –Ø –æ–ø–∏—à—É –∫–∞–¥—Ä –∏ —Å–æ–±–µ—Ä—É –ø—Ä–æ–º–ø—Ç. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É¬ª ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É –≤–µ—Ä—Å–∏—é. –ü–æ—Å–ª–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª ‚Äî –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.\n\n"

        "üìù –ü–æ –ø—Ä–æ–º–ø—Ç—É\n"
        "–ï—Å—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç? –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ (¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É¬ª). –í–µ—Ä–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é. –ü–æ—Å–ª–µ –∂–º—ë—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.\n\n"

        "‚∏ª\n\n"

        "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º\n"
        "‚Ä¢ –í—ã –≤–∏–¥–∏—Ç–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–≤–Ω—É—Ç—Ä–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).\n"
        "‚Ä¢ –ü–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"

        "üéØ –î–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî —Ç–æ—á–µ—á–Ω–æ –ø—Ä–∞–≤–∏–º –¥–µ—Ç–∞–ª–∏ (–º—É–∑—ã–∫–∞, —Ä–æ–ª–∏, –¥–∏–∞–ª–æ–≥–∏, —Å—Ç–∏–ª—å/–≤–∞–π–±, –∫–∞–º–µ—Ä–∞, —Ç–µ–º–ø).\n"
        "‚Ä¢ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö –ø–æ–º–µ—Ç–æ–∫.\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É.\n\n"

        "‚∏ª\n\n"

        "‚ÑπÔ∏è –ü–∞—Ä–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º.\n"
        "‚Ä¢ –ü—Ä–æ–º–ø—Ç —Å–æ–±–∏—Ä–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (ChatGPT, Gemini 2.5 Pro, Grok) ‚Äî –∑–∞—Ç–æ—á–µ–Ω–æ –ø–æ–¥ Veo 3.\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 9:16 –∏ 16:9."
    )
    await callback.message.answer(text, reply_markup=help_keyboard(callback.from_user.id))

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É ---


@router.callback_query(F.data == "generate_by_text")
async def callback_generate_by_text(callback: types.CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    start_msg_id = data.get("start_message_id")
    if start_msg_id:
        with suppress(Exception):
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=start_msg_id)
    await callback.answer()
    await callback.message.answer("–®–∞–≥ 2/3. –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ä–æ–ª–∏–∫–µ?", reply_markup=InlineKeyboardBuilder().button(text="–ù–∞–∑–∞–¥", callback_data="start_back").as_markup())
    await state.update_data(mode="text")
    await state.set_state(fsm.BotState.waiting_for_text_description)


@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    brief = (message.text or "").strip()
    if not brief:
        await message.answer("–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å—é–∂–µ—Ç –±—É–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ.")
        return

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
    progress_task = asyncio.create_task(
        show_progress(progress_msg, stage="prompt"))

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=brief,
            clarifications=None,
            attempt=1,
            previous_prompt=None,
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        await _stop_task(progress_task)

    await state.update_data(
        prompt_brief=brief,
        prompt_last=en_text,
        prompt_attempt=1,
        prompt_clarifications=[],
        mode="text"
    )
    await progress_msg.edit_text(f"`{ru_text}`", parse_mode="Markdown", reply_markup=prompt_options_kb())
    await state.set_state(fsm.PromptAssistantState.reviewing)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ ---


@router.callback_query(F.data == "generate_photo")
async def start_photo_flow(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await state.update_data(mode="photo")
    await callback.message.answer("–®–∞–≥ 2/3. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–¥—Ä–µ (–¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ ‚Äî –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è).", reply_markup=InlineKeyboardBuilder().button(text="–ù–∞–∑–∞–¥", callback_data="start_back").as_markup())
    await state.set_state(fsm.PhotoState.waiting_photo)


@router.message(fsm.PhotoState.waiting_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    file = await message.bot.get_file(photo_id)
    file_bytes = await message.bot.download_file(file.file_path)

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
    image_url = storage.save(file_bytes.getvalue(
    ), extension=".jpg", prefix="prompt_inputs/")
    await state.update_data(image_url=image_url, prompt_attempt=1, prompt_clarifications=[])

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –∏ —Å–æ–±–∏—Ä–∞—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
    progress_task = asyncio.create_task(
        show_progress(progress_msg, stage="prompt"))

    try:
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–≤ image_url –≤ backend
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=message.caption or "",
            clarifications=None,
            attempt=1,
            previous_prompt=None,
            image_url=image_url,
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —Ñ–æ—Ç–æ: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        await _stop_task(progress_task)

    await state.update_data(prompt_last=en_text)
    await progress_msg.edit_text(f"`{ru_text}`", parse_mode="Markdown", reply_markup=prompt_options_kb())
    await state.set_state(fsm.PromptAssistantState.reviewing)

# --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º (–æ–±—â–∞—è) ---


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_accept")
async def prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
    await callback.message.answer("–®–∞–≥‚ÄØ3/3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ:", reply_markup=aspect_ratio_kb())


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_other")
async def prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief") or ""
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–æ—Ç—É—Ö
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç‚Ä¶", show_alert=False)

    # —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await callback.message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç‚Ä¶")

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    progress_task = asyncio.create_task(
        show_progress(progress_msg, stage="prompt")
    )

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(callback.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last,
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: %s", e)
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        await _stop_task(progress_task)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(prompt_last=en_text, prompt_attempt=attempt)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    await progress_msg.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n`{ru_text}`",
        parse_mode="Markdown",
        reply_markup=prompt_options_kb()
    )


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_edit")
async def prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å:")
    await state.set_state(fsm.PromptAssistantState.editing)


@router.message(fsm.PromptAssistantState.editing)
async def prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É.")
        return

    data = await state.get_data()
    brief = data.get("prompt_brief") or ""
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä
    progress_msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫‚Ä¶")
    progress_task = asyncio.create_task(
        show_progress(progress_msg, stage="prompt")
    )

    try:
        ru_text, en_text = await backend.suggest_prompt(
            chat_id=str(message.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∫–∞–º–∏: %s", e)
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        await _stop_task(progress_task)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(prompt_clarifications=clar, prompt_last=en_text, prompt_attempt=attempt)
    # –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    await progress_msg.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n`{ru_text}`",
        parse_mode="Markdown",
        reply_markup=prompt_options_kb()
    )
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
    await state.set_state(fsm.PromptAssistantState.reviewing)


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_reject")
async def prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.message.answer("–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")

# --- –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---


def pay_button() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="select_pay_method")

    return kb.as_markup()


@router.callback_query(fsm.PromptAssistantState.reviewing, F.data.startswith("aspect_"))
async def aspect_ratio_chosen(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    if not prompt_text:
        await callback.message.answer("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    aspect_ratio = "16:9" if callback.data == "aspect_16_9" else "9:16"
    mode = data.get("mode")
    coins = await backend.get_coins(callback.from_user.id)
    if coins == 0:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=pay_button())
        return

    try:
        if mode == "photo":
            image_url = data.get("image_url")
            if not image_url:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                return
            task = await backend.generate_photo(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                image_url=image_url,
                aspect_ratio=aspect_ratio,
            )
        else:
            task = await backend.generate_text(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                aspect_ratio=aspect_ratio,
            )

        task_id = task["task_id"]
        # –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–∂–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        raw_ctx = {
            "prompt": prompt_text,
            "mode": mode,
            "aspect_ratio": aspect_ratio,
            "image_url": image_url if mode == "photo" else None,
        }

        # co—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ë–î ‚Äì –æ—à–∏–±–∫–∏ –ª–æ–≤–∏–º –ø–æ –º–µ—Å—Ç—É
        with suppress(Exception):
            await backend.save_task(task_id, str(callback.from_user.id), raw_ctx, is_video=(mode == "photo"), rating=0)

        await callback.message.answer(
            f"üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n–û—Å—Ç–∞—Ç–æ–∫: {coins -1}.\n"
            "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
            "–°–¥–µ–ª–∞—Ç—å –µ—â—ë?",
            reply_markup=sent_prompt_kb(task_id)
        )
        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
        progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
        progress_task = asyncio.create_task(
            show_progress(progress_msg, stage="video"))
        PROGRESS[task_id] = {
            "task": progress_task,
            "chat_id": callback.message.chat.id,
            "message_id": progress_msg.message_id,
        }
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

# --- –ü–æ–≤—Ç–æ—Ä –∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---

# @router.callback_query(F.data == "repeat_generation")
# async def on_repeat_generation(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     prompt_text = data.get("prompt_last")
#     mode = data.get("mode")
#     if not prompt_text:
#         await callback.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True)
#         return

#     # –ø–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–µ–º –∂–µ aspect_ratio (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)
#     aspect_ratio = "16:9"
#     try:
#         if mode == "photo":
#             image_url = data.get("image_url")
#             task = await backend.generate_photo(
#                 chat_id=str(callback.from_user.id),
#                 prompt=prompt_text,
#                 image_url=image_url,
#                 aspect_ratio=aspect_ratio,
#             )
#         else:
#             task = await backend.generate_text(
#                 chat_id=str(callback.from_user.id),
#                 prompt=prompt_text,
#                 aspect_ratio=aspect_ratio,
#             )
#         await callback.message.answer(
#             f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!",
#             parse_mode="Markdown"
#         )
#         task_id = task["task_id"]

#         # 2) –ø–æ—Ç–æ–º –∑–∞–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ finish
#         progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
#         progress_task = asyncio.create_task(show_progress(progress_msg, stage="video"))
#         PROGRESS[task_id] = {
#             "task": progress_task,
#             "chat_id": callback.message.chat.id,
#             "message_id": progress_msg.message_id,
#         }

#     except Exception as e:
#         logging.exception("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
#         await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä.")
#     finally:
#         await _stop_task(progress_task)


@router.callback_query(F.data.startswith("repeat_generation:"))
async def on_repeat_generation_by_task(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    _, task_id = callback.data.split(":", 1)
    progress_task: asyncio.Task | None = None

    coins = await backend.get_coins(callback.from_user.id)
    if coins == 0:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=pay_button())
        return

    try:
        # –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î
        task_record = await backend.get_task(task_id)

        # raw –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ JSON‚Äë—Å—Ç—Ä–æ–∫–∏
        raw = json.loads(task_record.get("raw", "{}"))
        prompt = raw.get("prompt")
        mode = raw.get("mode")
        aspect_ratio = raw.get("aspect_ratio")
        image_url = raw.get("image_url", "")
        print(task_record)
        # –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM ‚Äì –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è prompt_last –∏ mode
        await state.update_data(prompt_last=prompt, mode=mode, image_url=image_url)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if mode == "photo" and image_url:
            new_task = await backend.generate_photo(
                chat_id=str(callback.from_user.id),
                prompt=prompt,
                image_url=image_url,
                aspect_ratio=aspect_ratio,
            )
        else:
            new_task = await backend.generate_text(
                chat_id=str(callback.from_user.id),
                prompt=prompt,
                aspect_ratio=aspect_ratio,
            )

        new_task_id = new_task["task_id"]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        with suppress(Exception):
            await backend.save_task(
                new_task_id,
                str(callback.from_user.id),
                raw,
                is_video=(mode == "photo"),
                rating=0,
            )
        await callback.message.answer(
            f"üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n–û—Å—Ç–∞—Ç–æ–∫: {coins -1}.\n"
            "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
            "–°–¥–µ–ª–∞—Ç—å –µ—â—ë?",
            reply_markup=sent_prompt_kb(task_id)
        )
        await callback.answer()
        # –∑–∞–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ finish
        progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
        progress_task = asyncio.create_task(
            show_progress(progress_msg, stage="video"))
        PROGRESS[new_task_id] = {
            "task": progress_task,
            "chat_id": callback.message.chat.id,
            "message_id": progress_msg.message_id,
        }

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", show_alert=True)


@router.callback_query(F.data == "new_generation")
async def on_new_generation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–®–∞–≥‚ÄØ1/3. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
        reply_markup=start_keyboard(callback.from_user.id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("rate:"))
async def on_rate(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, task_id, rating_str = callback.data.split(":")
        rating = int(rating_str)
        if rating < 1 or rating > 5:
            raise ValueError("rating must be 1-5")
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏", show_alert=True)
        return

    try:
        await backend.rate_task(task_id, rating)
        message_id = await redis.get_del_msg(f"{callback.from_user.id}:{task_id}")
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=message_id)
        await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {"‚≠ê" * rating}!", reply_markup=sent_prompt_kb(task_id))

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", show_alert=True)


@router.callback_query(F.data == "hello")
async def testing(callback: types.CallbackQuery):
    progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶")
    progress_task = asyncio.create_task(
        show_progress(progress_msg, stage="video"))
    print(callback.bot, callback.from_user.id, progress_msg.message_id)
