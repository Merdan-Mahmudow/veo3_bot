from io import BytesIO
import logging
from typing import Optional
from aiogram import Router, types, F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.context import FSMContext
from bot import fsm
from bot.api import BackendAPI
from config import ENV
from services.kie import GenerateRequests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.storage import YandexS3Storage

router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)
storage = YandexS3Storage()



def start_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_photo")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy_coins")
    kb.button(text="–ß—Ç–æ —É–º–µ—é?", callback_data="help")
    kb.button(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{env.SUPPORT_USERNAME}")
    kb.adjust(1, 1)
    return kb.as_markup()

def prompt_options_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="prompt_edit")
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="prompt_accept")
    kb.button(text="‚Üª –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="prompt_other")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="prompt_reject")
    kb.adjust(2)
    return kb.as_markup()

@router.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        exists = await backend.check_user_exist(message.from_user.id)
    except Exception:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∞–µ–º
    if not exists:
        # –ë–∞–Ω–Ω–µ—Ä
        await message.answer_photo(
            photo=types.URLInputFile(
                f"{env.yc_s3_endpoint_url}/veobot/photo_2025-08-12_00-07-56.jpg"),
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        )

        await message.answer("–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶")
        nickname = (
            message.from_user.username
            or message.from_user.first_name
            or f"user_{message.from_user.id}"
        )
        try:
            res = await backend.register_user(message.from_user.id, nickname=nickname)
        except Exception:
            await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

        if not res.get("created", False) and res.get("reason") != "exists":
            await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

    # –û–±—â–∞—è –≤–µ—Ç–∫–∞ –ø–æ—Å–ª–µ ensure user: –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—ë–º –º–µ–Ω—é
    try:
        coins = await backend.get_coins(message.from_user.id)
    except Exception:
        coins = 0

    if not exists:
        text = (
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ!\n\n"
            f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )
    else:
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )

    sent_message: Optional[types.Message] = await message.answer(
        text,
        reply_markup=start_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(start_message_id=sent_message.message_id)
    await state.set_state(fsm.BotState.start_message_id)


@router.callback_query(F.data == "generate_by_text")
async def callback_generate_by_text(callback: types.CallbackQuery, state: FSMContext):
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    chat_id = callback.message.chat.id

    if start_message_id:
        try:
            await callback.bot.delete_message(chat_id=chat_id, message_id=start_message_id)
        except Exception:
            pass

    await callback.answer()
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ."
    )
    await state.clear()
    await state.update_data(mode="text")
    await state.set_state(fsm.BotState.waiting_for_text_description)


@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    brief = (message.text or "").strip()
    if not brief:
        await message.answer("–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å—é–∂–µ—Ç –±—É–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ.")
        return

    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    try:
        suggestion = await backend.suggest_prompt(
            chat_id=str(message.chat.id),
            brief=brief,
            clarifications=None,
            attempt=1,
            previous_prompt=None,
            # aspect_ratio="16:9",
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    await state.update_data(
        prompt_brief=brief,
        prompt_last=suggestion,
        prompt_attempt=1,
        prompt_clarifications=[],
    )

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"{suggestion}",
        reply_markup=prompt_options_kb(),  # —Å–º. –Ω–∏–∂–µ
    )
    await state.set_state(fsm.PromptAssistantState.reviewing)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞

@router.callback_query(F.data == "generate_by_photo")
async def callback_generate_by_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    chat_id = callback.message.chat.id
    if start_message_id:
        try:
            await callback.bot.delete_message(chat_id=chat_id, message_id=start_message_id)
        except Exception:
            pass

    await callback.answer()
    await callback.message.answer(
        "üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ **—Å –ø–æ–¥–ø–∏—Å—å—é** ‚Äî —Ç–µ–∫—Å—Ç–æ–º –æ–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—à–∏ ¬´—Å—Ç–∏–ª—å –Ω–µ–æ–Ω/–∫–∏–±–µ—Ä–ø–∞–Ω–∫, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥, —Å—É–º–µ—Ä–∫–∏¬ª.",
        parse_mode="Markdown"
    )
    await state.clear()
    await state.update_data(mode="photo")
    await state.set_state(fsm.BotState.waiting_for_photo)

# ---------- –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é) ----------

@router.message(fsm.BotState.waiting_for_photo, F.photo)
async def handle_photo_with_caption(message: types.Message, state: FSMContext):
    prompt = (message.caption or "").strip()
    
    if not prompt:
        # –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        # —Å–æ—Ö—Ä–∞–Ω–∏–º file_id, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ
        tg_photo = message.photo[-1]
        await state.update_data(pending_photo_file_id=tg_photo.file_id)
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ).")
        await state.set_state(fsm.BotState.waiting_for_photo_caption)
        return

    await _start_generate_by_photo(message, state, prompt, photo_file_id=message.photo[-1].file_id)

# ---------- –ï—Å–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ) ----------

@router.message(fsm.BotState.waiting_for_photo_caption, F.text)
async def handle_photo_caption(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file_id = data.get("pending_photo_file_id")
    if not file_id:
        await message.answer("–ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        await state.set_state(fsm.BotState.waiting_for_photo)
        return

    prompt = message.text.strip()
    if not prompt:
        await message.answer("–ù—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ üôè")
        return

    await _start_generate_by_photo(message, state, prompt, photo_file_id=file_id)

# ---------- –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------

async def _start_generate_by_photo(message: types.Message, state: FSMContext, prompt: str, photo_file_id: str):
    # –∫–∞—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ TG –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
    try:
        file = await message.bot.get_file(photo_file_id)
        buf = BytesIO()
        await message.bot.download(file, destination=buf)
        buf.seek(0)
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –ø—É—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram CDN
        if file.file_path and "." in file.file_path:
            ext = "." + file.file_path.rsplit(".", 1)[-1].lower()
        else:
            ext = ".jpg"
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ Telegram. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return

    # –∑–æ–≤—ë–º backend
    try:
        print(prompt)
        res = await backend.generate_photo(
            chat_id=message.from_user.id,
            prompt=prompt,
            file_bytes=buf.getvalue(),
            filename=f"photo{ext}",
        )
        task_id = (res or {}).get("task_id")
        if not task_id:
            raise RuntimeError("backend did not return task_id")
    except Exception as e:
        # —á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, ¬´–Ω–µ—Ç –º–æ–Ω–µ—Ç¬ª
        msg = str(e).lower()
        if "coin" in msg or "–º–æ–Ω–µ—Ç" in msg or "insufficient" in msg:
            await message.answer("ü•≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # —É—Å–ø–µ—Ö: —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.clear()
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è–ª! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–∏—à–ª—é —Å—é–¥–∞ —Å—Å—ã–ª–∫—É.\n"
        f"ID –∑–∞–¥–∞—á–∏: `{task_id}`",
        parse_mode="Markdown",
    )

# ---------- –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –º–æ–Ω–µ—Ç ----------

@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    prompt = (message.text or "").strip()
    if not prompt:
        await message.answer("–ù—É–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ üôè")
        return

    await message.answer(f"üé¨ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{prompt}")
    try:
        res = await backend.generate_text(chat_id=message.from_user.id, prompt=prompt)
        task_id = (res or {}).get("task_id")
        if not task_id:
            raise RuntimeError("backend did not return task_id")
    except Exception as e:
        msg = str(e).lower()
        if "coin" in msg or "–º–æ–Ω–µ—Ç" in msg or "insufficient" in msg:
            await message.answer("ü•≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await state.clear()
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è–ª! –Ø –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.\n"
        f"ID –∑–∞–¥–∞—á–∏: `{task_id}`",
        parse_mode="Markdown",
    )

# ---------- –û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è ----------

@router.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùé –û—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")

    
@router.message(Command("test"))
async def test_details(message: types.Message, command: CommandObject):
    args = command.args
    generate = GenerateRequests()
    if args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    req = await generate.get_video_info(args.replace(" ", ""))
    print(req)


@router.callback_query(F.data == "prompt_help")
async def prompt_help_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await state.update_data(
        prompt_attempt=0,
        prompt_brief=None,
        prompt_last=None,
        prompt_clarifications=[],
    )
    await callback.message.answer(
        "–û–∫–µ–π. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å: —Ç–µ–º–∞/—Å—Ü–µ–Ω–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ–æ–Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é, –¥–æ–∂–¥—å, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Ä–∞–∫—É—Ä—Å¬ª."
    )
    await state.set_state(fsm.PromptAssistantState.waiting_brief)



@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_accept")
async def prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    if not prompt_text:
        await callback.answer("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è", show_alert=True)
        return

    mode = data.get("mode")  # 'text' –∏–ª–∏ 'photo'
    await callback.answer("–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ")

    try:
        if mode == "photo":
            # –ü–æ–ª—É—á–∞–µ–º URL (–∏–ª–∏ id) —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = data.get("image_url")
            if not image_url:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                await state.clear()
                return

            # –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ image_url
            task = await backend.generate_photo(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
                image_url=image_url,
                )

        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
            task = await backend.generate_text(
                chat_id=str(callback.from_user.id),
                prompt=prompt_text,
            )

        await callback.message.answer(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
    finally:
        await state.clear()

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_other")
async def prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief")
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    try:
        suggestion = await backend.suggest_prompt(
            chat_id=str(callback.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last,
            # aspect_ratio="16:9",
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        return

    await state.update_data(prompt_last=suggestion, prompt_attempt=attempt)
    await callback.message.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await callback.answer("–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!")

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_edit")
async def prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å:")
    await state.set_state(fsm.PromptAssistantState.editing)  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–æ–∫

@router.message(fsm.PromptAssistantState.editing)
async def prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å—Ç–∏.")
        return
    data = await state.get_data()
    brief = data.get("prompt_brief")
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    attempt = int(data.get("prompt_attempt", 1)) + 1
    last = data.get("prompt_last")

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫
    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        # aspect_ratio="16:9",
    )
    await state.update_data(prompt_clarifications=clar, prompt_last=suggestion, prompt_attempt=attempt)
    await message.answer(
        f"{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await state.set_state(fsm.PromptAssistantState.reviewing)

@router.callback_query(fsm.PromptAssistantState.reviewing, F.data == "prompt_reject")
async def prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.message.answer("–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")



# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ ---
@router.callback_query(F.data == "generate_photo")
async def start_photo_flow(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(mode="photo")
    await callback.answer()
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–≤ –ø–æ–¥–ø–∏—Å–∏), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç.")
    await state.set_state(fsm.PhotoState.waiting_photo)

@router.message(fsm.PhotoState.waiting_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo_id = message.photo[-1].file_id
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑
    file = await message.bot.get_file(photo_id)
    file_bytes = await message.bot.download_file(file.file_path)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3 –∏ –ø–æ–ª—É—á–∞–µ–º URL
    image_url = storage.save(file_bytes.getvalue(), extension=".jpg", prefix="prompt_inputs/")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äì –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    await state.update_data(image_url=image_url, prompt_attempt=1, prompt_clarifications=[])

    # –ü—Ä–æ—Å–∏–º GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–≤ image_url
    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=message.caption or "",
        clarifications=None,
        attempt=1,
        previous_prompt=None,
        # aspect_ratio="16:9",
        image_url=image_url,
    )

    await state.update_data(prompt_last=suggestion)
    await message.answer(
        f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n{suggestion}",
        reply_markup=prompt_options_kb()
    )
    await state.set_state(fsm.PromptAssistantState.reviewing)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ reviewing ---
@router.callback_query(fsm.PhotoState.reviewing, F.data == "prompt_accept")
async def photo_prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    file_id = data.get("photo_file_id")
    if not prompt_text or not file_id:
        await callback.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ üé¨")

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥
    try:
        # –ø–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ aiogram
        file = await callback.bot.get_file(file_id)
        file_bytes = await callback.bot.download_file(file.file_path)
        image_ext = ".jpg"
        task = await backend.generate_photo(
            chat_id=str(callback.from_user.id),
            prompt=prompt_text,
            image_bytes=file_bytes.getvalue(),
            image_ext=image_ext,
        )
        await callback.message.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task['task_id']}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ: %s", e)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
    finally:
        await state.clear()

@router.callback_query(fsm.PhotoState.reviewing, F.data == "prompt_other")
async def photo_prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief", "")
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    suggestion = await backend.suggest_prompt(
        chat_id=str(callback.from_user.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        # aspect_ratio="16:9",
    )
    await state.update_data(prompt_last=suggestion, prompt_attempt=attempt)
    await callback.message.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await callback.answer("–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!")

@router.callback_query(fsm.PhotoState.reviewing, F.data == "prompt_edit")
async def photo_prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–ø—Ä–æ—Å—É:")
    await state.set_state(fsm.PhotoState.editing)

@router.message(fsm.PhotoState.editing)
async def photo_prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É.")
        return
    data = await state.get_data()
    brief = data.get("prompt_brief", "")
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        # aspect_ratio="16:9",
    )
    await state.update_data(prompt_clarifications=clar, prompt_last=suggestion, prompt_attempt=attempt)
    await message.answer(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt} (—Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫):\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await state.set_state(fsm.PhotoState.reviewing)

@router.callback_query(fsm.PhotoState.reviewing, F.data == "prompt_reject")
async def photo_prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer("–ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
