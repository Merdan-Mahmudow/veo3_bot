from io import BytesIO
from typing import Optional
from aiogram import Router, types, F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.context import FSMContext
from bot import fsm
from bot.api import BackendAPI
from config import ENV
from services.kie import GenerateRequests
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)



def start_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="generate_by_text")
    kb.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="generate_by_photo")
    kb.button(text="–ü–æ–º–æ—â—å —Å –ø—Ä–æ–º–ø—Ç–æ–º", callback_data="prompt_help")  # <‚Äì‚Äì –Ω–æ–≤–∞—è
    kb.adjust(1, 1, 1)
    return kb.as_markup()


@router.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        exists = await backend.check_user_exist(message.from_user.id)
    except Exception:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∞–µ–º
    if not exists:
        # –ë–∞–Ω–Ω–µ—Ä
        await message.answer_photo(
            photo=types.URLInputFile(
                f"{env.yc_s3_endpoint_url}/veobot/photo_2025-08-12_00-07-56.jpg"),
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        )

        await message.answer("–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶")
        nickname = (
            message.from_user.username
            or message.from_user.first_name
            or f"user_{message.from_user.id}"
        )
        try:
            res = await backend.register_user(message.from_user.id, nickname=nickname)
        except Exception:
            await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

        if not res.get("created", False) and res.get("reason") != "exists":
            await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ @softp04")
            return

    # –û–±—â–∞—è –≤–µ—Ç–∫–∞ –ø–æ—Å–ª–µ ensure user: –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—ë–º –º–µ–Ω—é
    try:
        coins = await backend.get_coins(message.from_user.id)
    except Exception:
        coins = 0

    if not exists:
        text = (
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ!\n\n"
            f"–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )
    else:
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n–£ —Ç–µ–±—è {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
        )

    sent_message: Optional[types.Message] = await message.answer(
        text,
        reply_markup=start_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(start_message_id=sent_message.message_id)
    await state.set_state(fsm.BotState.start_message_id)


@router.callback_query(F.data == "generate_by_text")
async def callback_generate_by_text(callback: types.CallbackQuery, state: FSMContext):
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    chat_id = callback.message.chat.id

    if start_message_id:
        try:
            await callback.bot.delete_message(chat_id=chat_id, message_id=start_message_id)
        except Exception:
            pass

    await callback.answer()
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ."
    )
    await state.set_state(fsm.BotState.waiting_for_text_description)


@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    prompt = message.text.strip()

    if not prompt:
        await message.answer("–ù—É–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ üôè")
        return

    await message.answer(f"üé¨ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{prompt}")

    # –®–∞–≥–∞–µ–º –≤ –Ω–∞—à –ë–≠–ö: /bot/veo/generate/text
    try:
        resp = await backend.generate_text(chat_id=message.from_user.id, prompt=prompt)
        # –æ–∂–∏–¥–∞–µ–º {"ok": True, "task_id": "..."}
        task_id = resp.get("task_id")
        if not task_id:
            raise RuntimeError("Backend –Ω–µ –≤–µ—Ä–Ω—É–ª task_id")
    except Exception as e:
        # —Å—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Å–µ—Ç–µ–≤—ã–µ/–ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å e
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ)
    await state.update_data(last_task_id=task_id, last_prompt=prompt)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã—Ö–æ–¥–∏–º: –¥–∞–ª—å—à–µ –ø—Ä–∏–¥—ë—Ç –ø—É—à –∏–∑ –∫–æ–ª–±—ç–∫–∞
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è–ª! –Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–¥–µ—Å—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.\n\n"
        f"ID –∑–∞–¥–∞—á–∏: `{task_id}`",
        parse_mode="Markdown"
    )
@router.callback_query(F.data == "generate_by_photo")
async def callback_generate_by_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    chat_id = callback.message.chat.id
    if start_message_id:
        try:
            await callback.bot.delete_message(chat_id=chat_id, message_id=start_message_id)
        except Exception:
            pass

    await callback.answer()
    await callback.message.answer(
        "üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ **—Å –ø–æ–¥–ø–∏—Å—å—é** ‚Äî —Ç–µ–∫—Å—Ç–æ–º –æ–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—à–∏ ¬´—Å—Ç–∏–ª—å –Ω–µ–æ–Ω/–∫–∏–±–µ—Ä–ø–∞–Ω–∫, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥, —Å—É–º–µ—Ä–∫–∏¬ª.",
        parse_mode="Markdown"
    )
    await state.set_state(fsm.BotState.waiting_for_photo)

# ---------- –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é) ----------

@router.message(fsm.BotState.waiting_for_photo, F.photo)
async def handle_photo_with_caption(message: types.Message, state: FSMContext):
    prompt = (message.caption or "").strip()
    if not prompt:
        # –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        # —Å–æ—Ö—Ä–∞–Ω–∏–º file_id, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ
        tg_photo = message.photo[-1]
        await state.update_data(pending_photo_file_id=tg_photo.file_id)
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ).")
        await state.set_state(fsm.BotState.waiting_for_photo_caption)
        return

    await _start_generate_by_photo(message, state, prompt, photo_file_id=message.photo[-1].file_id)

# ---------- –ï—Å–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ) ----------

@router.message(fsm.BotState.waiting_for_photo_caption, F.text)
async def handle_photo_caption(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file_id = data.get("pending_photo_file_id")
    if not file_id:
        await message.answer("–ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        await state.set_state(fsm.BotState.waiting_for_photo)
        return

    prompt = message.text.strip()
    if not prompt:
        await message.answer("–ù—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ üôè")
        return

    await _start_generate_by_photo(message, state, prompt, photo_file_id=file_id)

# ---------- –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------

async def _start_generate_by_photo(message: types.Message, state: FSMContext, prompt: str, photo_file_id: str):
    await message.answer("üé¨ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ‚Ä¶")

    # –∫–∞—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ TG –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
    try:
        file = await message.bot.get_file(photo_file_id)
        buf = BytesIO()
        await message.bot.download(file, destination=buf)
        buf.seek(0)
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –ø—É—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram CDN
        if file.file_path and "." in file.file_path:
            ext = "." + file.file_path.rsplit(".", 1)[-1].lower()
        else:
            ext = ".jpg"
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ Telegram. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return

    # –∑–æ–≤—ë–º backend
    try:
        res = await backend.generate_photo(
            chat_id=message.from_user.id,
            prompt=prompt,
            file_bytes=buf.getvalue(),
            filename=f"photo{ext}",
        )
        task_id = (res or {}).get("task_id")
        if not task_id:
            raise RuntimeError("backend did not return task_id")
    except Exception as e:
        # —á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, ¬´–Ω–µ—Ç –º–æ–Ω–µ—Ç¬ª
        msg = str(e).lower()
        if "coin" in msg or "–º–æ–Ω–µ—Ç" in msg or "insufficient" in msg:
            await message.answer("ü•≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # —É—Å–ø–µ—Ö: —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.clear()
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è–ª! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–∏—à–ª—é —Å—é–¥–∞ —Å—Å—ã–ª–∫—É.\n"
        f"ID –∑–∞–¥–∞—á–∏: `{task_id}`",
        parse_mode="Markdown",
    )

# ---------- –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –º–æ–Ω–µ—Ç ----------

@router.message(fsm.BotState.waiting_for_text_description)
async def handle_text_description(message: types.Message, state: FSMContext):
    prompt = (message.text or "").strip()
    if not prompt:
        await message.answer("–ù—É–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ üôè")
        return

    await message.answer(f"üé¨ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{prompt}")
    try:
        res = await backend.generate_text(chat_id=message.from_user.id, prompt=prompt)
        task_id = (res or {}).get("task_id")
        if not task_id:
            raise RuntimeError("backend did not return task_id")
    except Exception as e:
        msg = str(e).lower()
        if "coin" in msg or "–º–æ–Ω–µ—Ç" in msg or "insufficient" in msg:
            await message.answer("ü•≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await state.clear()
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è–ª! –Ø –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.\n"
        f"ID –∑–∞–¥–∞—á–∏: `{task_id}`",
        parse_mode="Markdown",
    )

# ---------- –û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è ----------

@router.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùé –û—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")

    
@router.message(Command("test"))
async def test_details(message: types.Message, command: CommandObject):
    args = command.args
    generate = GenerateRequests()
    if args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    req = await generate.get_video_info(args.replace(" ", ""))
    print(req)


@router.callback_query(F.data == "prompt_help")
async def prompt_help_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await state.update_data(
        prompt_attempt=0,
        prompt_brief=None,
        prompt_last=None,
        prompt_clarifications=[],
    )
    await callback.message.answer(
        "–û–∫–µ–π. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å: —Ç–µ–º–∞/—Å—Ü–µ–Ω–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ–æ–Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é, –¥–æ–∂–¥—å, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Ä–∞–∫—É—Ä—Å¬ª."
    )
    await state.set_state(fsm.PromptAssistantState.waiting_brief)
