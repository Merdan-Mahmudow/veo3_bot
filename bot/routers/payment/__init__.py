from __future__ import annotations
import json
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.fsm import PaymentState
from bot.api import BackendAPI
from config import ENV
env = ENV()

router = Router()

backend = BackendAPI(env.bot_api_token)


CURRENCY = "RUB"
PROVIDER_TOKEN = env.test_payment_token

PLANS: dict[int, tuple[str, int]] = {
    1:  ("1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 88),
    5:  ("5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 388),
    10: ("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 666),
    50: ("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 2999),
}

def rub_to_kopeks(rub: int | float) -> int:
    return int(round(float(rub) * 100))

def payment_keyboard() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for coins, (label, price_rub) in PLANS.items():
        kb.button(
            text=f"{label} ‚Äî {price_rub}‚ÇΩ",
            callback_data=f"pay_gens:{coins}"
        )
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –æ–ø–ª–∞—Ç—É ----------

@router.message(PaymentState.choosing_plan)
async def payment_menu(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=payment_keyboard())

# ---------- –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ‚Üí –∏–Ω–≤–æ–π—Å ----------

@router.callback_query(F.data.startswith("pay_gens:"))
async def pay_gens(callback: types.CallbackQuery):
    try:
        _, coins_str = callback.data.split(":")
        coins = int(coins_str)
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    if coins not in PLANS:
        await callback.answer("–¢–∞–∫–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç", show_alert=True)
        return

    label, price_rub = PLANS[coins]
    price_kop = rub_to_kopeks(price_rub)

    payload = f"buy:gens:{coins}"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞
    title = f"–ü–æ–∫—É–ø–∫–∞ {label}"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {label.lower()} –¥–ª—è –±–æ—Ç–∞."

    await callback.message.answer_invoice(
        title=title,
        description=description,
        payload=payload,
        currency=CURRENCY,
        provider_token=PROVIDER_TOKEN,
        prices=[LabeledPrice(label=label, amount=price_kop)],
        start_parameter=f"pay_{coins}",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """
    –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å payload/—Å—É–º–º—É.
    –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º.
    """
    print("hello its working")
    # *–ï—Å–ª–∏* —Ö–æ—Ç–∏—Ç–µ –∂—ë—Å—Ç–∫–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É:
    # expected_kop = expected_amount_from_payload(pre_checkout_query.invoice_payload)
    # ok = (pre_checkout_query.total_amount == expected_kop and pre_checkout_query.currency == CURRENCY)
    # await pre_checkout_query.answer(ok=ok, error_message="–°—É–º–º–∞ –Ω–µ–≤–µ—Ä–Ω–∞") ; return
    await pre_checkout_query.answer(ok=True)
    return 


# ---------- –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ----------

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Ç—Ä–∞–µ–≤ Telegram)
_processed_payments: set[str] = set()

def expected_amount_from_payload(payload: str) -> tuple[int, int] | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (coins, expected_kop) –∏–ª–∏ None.
    """
    if not payload or not payload.startswith("buy:gens:"):
        return None
    try:
        coins = int(payload.split(":")[-1])
        if coins in PLANS:
            _, price_rub = PLANS[coins]
            return coins, rub_to_kopeks(price_rub)
    except Exception:
        pass
    return None

@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    sp = message.successful_payment
    payload = sp.invoice_payload
    total = sp.total_amount
    currency = sp.currency

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞—Å—á—ë—Ç–∞
    payment_id = sp.telegram_payment_charge_id or sp.provider_payment_charge_id or f"{message.chat.id}:{payload}:{total}"
    if payment_id in _processed_payments:
        await message.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ —É—á—Ç–µ–Ω–∞ ‚úÖ")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã/—Ç–∞—Ä–∏—Ñ–∞
    exp = expected_amount_from_payload(payload)
    if not exp:
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —Ç–∞—Ä–∏—Ñ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ @softp04")
        return
    coins, expected_kop = exp

    if currency != CURRENCY or total != expected_kop:
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ @softp04")
        return

    # –ö—Ä–µ–¥–∏—Ç—É–µ–º –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ backend
    try:
        new_coins = await backend.plus_coins(message.from_user.id, count=coins)
    except Exception:
        await message.answer("–ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ @softp04, —É–∫–∞–∂–∏ —ç—Ç–æ—Ç –∫–æ–¥: PAY-APPLY-ERR")
        return

    _processed_payments.add(payment_id)

    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n"
        f"‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–æ: {coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_coins} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    )
