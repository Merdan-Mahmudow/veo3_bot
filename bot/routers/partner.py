from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.api import BackendAPI
from bot.fsm import PartnerState
from config import ENV

env = ENV()
router = Router()
backend = BackendAPI(env.bot_api_token)

def partner_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="partner_stats")
    kb.button(text="–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="partner_create_link")
    kb.button(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="partner_payout")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

@router.callback_query(F.data == "partner")
async def partner_menu(callback: types.CallbackQuery, state: FSMContext):
    partner = await backend.get_partner_by_chat_id(callback.from_user.id)
    if partner and partner.get("is_verified"):
        await callback.message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞!",
            reply_markup=partner_keyboard()
        )
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    await callback.answer()

@router.callback_query(F.data == "partner_stats")
async def partner_stats(callback: types.CallbackQuery, state: FSMContext):
    partner = await backend.get_partner_by_chat_id(callback.from_user.id)
    if not partner:
        await callback.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    stats = await backend.get_partner_stats(partner["id"])
    if not stats:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", show_alert=True)
        return

    await callback.message.edit_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"  - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {stats['registrations']}\n"
        f"  - –û–ø–ª–∞—Ç: {stats['payments']}\n"
        f"  - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earnings']:.2f} RUB",
        reply_markup=partner_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "partner_create_link")
async def create_link_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PartnerState.creating_link)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (10-50%).")
    await callback.answer()

@router.message(PartnerState.creating_link)
async def create_link_process(message: types.Message, state: FSMContext):
    try:
        percentage = int(message.text)
        if not 10 <= percentage <= 50:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 50.")
        return

    partner = await backend.get_partner_by_chat_id(message.from_user.id)
    if not partner:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    link_data = await backend.create_referral_link(partner["id"], percentage)
    if not link_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await message.answer(
        f"‚úÖ –í–∞—à–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{link_data['link']}`",
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data == "partner_payout")
async def payout_start(callback: types.CallbackQuery, state: FSMContext):
    partner = await backend.get_partner_by_chat_id(callback.from_user.id)
    if not partner:
        await callback.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.set_state(PartnerState.requesting_payout)
    await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {partner['balance']:.2f} RUB. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    await callback.answer()

@router.message(PartnerState.requesting_payout)
async def payout_process(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    partner = await backend.get_partner_by_chat_id(message.from_user.id)
    if not partner:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    if amount > partner['balance']:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return

    payout_data = await backend.request_payout(partner["id"], amount)
    if not payout_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()