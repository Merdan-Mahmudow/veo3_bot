from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.api import BackendAPI
from bot.routers.partner import PartnerFilter
from config import ENV

router = Router()
backend = BackendAPI(ENV().bot_api_token)

class PayoutRequestState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_requisites = State()

@router.callback_query(F.data == "partner_payouts", PartnerFilter())
async def payouts_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫
        balance_data = await backend.get_partner_dashboard(callback.from_user.id)
        history = await backend.get_payout_history(callback.from_user.id)

        balance_rub = balance_data.get('balance_minor', 0) / 100

        message_text = f"üí∏ **–í—ã–ø–ª–∞—Ç—ã**\n\n**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** `{balance_rub:.2f} RUB`\n\n"

        if not history:
            message_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É."
        else:
            message_text += "üìú **–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:**\n"
            for req in history:
                amount_rub = req['amount_minor'] / 100
                status = req['status'].upper()
                message_text += f"- `{req['created_at']}`: {amount_rub:.2f} RUB, –°—Ç–∞—Ç—É—Å: **{status}**\n"

        kb = InlineKeyboardBuilder()
        if balance_rub > 0: # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å
            kb.button(text="üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="payout_request_new")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="partner_cabinet")
        kb.adjust(1)

        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–ª–∞—Ç–∞—Ö: {e}", show_alert=True)

@router.callback_query(F.data == "payout_request_new", PartnerFilter())
async def payout_request_new(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.50):")
    await state.set_state(PayoutRequestState.waiting_for_amount)
    await callback.answer()

@router.message(PayoutRequestState.waiting_for_amount, PartnerFilter())
async def payout_amount_received(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        await state.update_data(amount_minor=int(amount * 100))
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞):")
        await state.set_state(PayoutRequestState.waiting_for_requisites)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50")

@router.message(PayoutRequestState.waiting_for_requisites, PartnerFilter())
async def payout_requisites_received(message: types.Message, state: FSMContext):
    requisites = message.text.strip()
    data = await state.get_data()
    amount_minor = data.get("amount_minor")

    try:
        await backend.request_payout(message.from_user.id, amount_minor, {"details": requisites})
        await message.answer(
            "‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –∫–∞–±–∏–Ω–µ—Ç", callback_data="partner_cabinet").as_markup()
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {e}")
        await state.clear()