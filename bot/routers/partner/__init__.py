from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from bot.api import BackendAPI
from config import ENV
from .links import router as links_router
from .payouts import router as payouts_router

router = Router()
router.include_router(links_router)
router.include_router(payouts_router)
backend = BackendAPI(ENV().bot_api_token)

class PartnerFilter(F.Filter):
    async def __call__(self, message_or_callback: types.Message | types.CallbackQuery) -> bool:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–¥–µ–∂–Ω–µ–µ,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ API –∏–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ FSM/Redis.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
        try:
            user = await backend.get_user(message_or_callback.from_user.id)
            return user.get("role") == "partner"
        except Exception:
            return False

def partner_main_keyboard():
    kb = types.InlineKeyboardBuilder()
    kb.button(text="üìä –î–∞—à–±–æ—Ä–¥", callback_data="partner_dashboard")
    kb.button(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="partner_links")
    kb.button(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="partner_payouts")
    kb.button(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="partner_reports")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_back")
    kb.adjust(1)
    return kb.as_markup()

@router.callback_query(F.data == "partner_reports", PartnerFilter())
async def partner_reports_stub(callback: types.CallbackQuery):
    await callback.answer("–†–∞–∑–¥–µ–ª –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@router.callback_query(F.data == "partner_cabinet", PartnerFilter())
async def partner_cabinet_entry(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    try:
        dashboard_data = await backend.get_partner_dashboard(callback.from_user.id)

        balance_rub = dashboard_data.get('balance_minor', 0) / 100
        commission_total_rub = dashboard_data.get('total_commission_minor', 0) / 100

        message_text = (
            "ü§ù **–ö–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞**\n\n"
            "**–í–∞—à –¥–∞—à–±–æ—Ä–¥:**\n"
            f"- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–≤—Å–µ–≥–æ): `{dashboard_data.get('total_referrals', 0)}`\n"
            f"- –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: `{dashboard_data.get('total_purchases', 0)}`\n"
            f"- –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: `{commission_total_rub:.2f} RUB`\n"
            f"- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{balance_rub:.2f} RUB`\n"
        )

        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=partner_main_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}", show_alert=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=partner_main_keyboard()
        )

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞—à–±–æ—Ä–¥" (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É–µ—Ç –≤—Ö–æ–¥)
@router.callback_query(F.data == "partner_dashboard", PartnerFilter())
async def partner_dashboard_show(callback: types.CallbackQuery, state: FSMContext):
    await partner_cabinet_entry(callback, state)