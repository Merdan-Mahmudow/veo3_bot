from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from bot.api import BackendAPI
from .filters import PartnerFilter
from config import ENV

router = Router()
backend = BackendAPI(ENV().bot_api_token)

@router.callback_query(F.data == "partner_links", PartnerFilter())
async def list_partner_links(callback: types.CallbackQuery, state: FSMContext):
    try:
        links = await backend.get_partner_links(callback.from_user.id)

        if not links:
            message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫."
        else:
            message_text = "üîó **–í–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏:**\n\n"
            for link in links:
                link_url = f"https://t.me/{ENV().BOT_USERNAME}?start={link.get('token')}"
                message_text += (
                    f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {link.get('comment', 'N/A')}\n"
                    f"**–ü—Ä–æ—Ü–µ–Ω—Ç:** {link.get('percent')}%\n"
                    f"**–°—Å—ã–ª–∫–∞:** `{link_url}`\n"
                    f"-------------------\n"
                )

        kb = types.InlineKeyboardBuilder()
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
        kb.button(text="‚ûï –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="partner_request_link")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="partner_cabinet")
        kb.adjust(1)

        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=kb.as_markup(),
            disable_web_page_preview=True
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}", show_alert=True)

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "partner_request_link", PartnerFilter())
async def request_new_link(callback: types.CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)