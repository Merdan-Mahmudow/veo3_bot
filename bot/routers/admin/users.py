from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.api import BackendAPI
from .filters import AdminFilter
from config import ENV

router = Router()
backend = BackendAPI(ENV().bot_api_token)

class AdminUserState(StatesGroup):
    waiting_for_user_identifier = State()
    showing_user_profile = State()


def user_profile_keyboard(user_id: str, current_role: str):
    kb = InlineKeyboardBuilder()
    if current_role != 'partner':
        kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", callback_data=f"user_set_role:partner:{user_id}")
    else:
        kb.button(text="–°–Ω—è—Ç—å —Ä–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data=f"user_set_role:user:{user_id}")

    if current_role != 'admin':
        kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"user_set_role:admin:{user_id}")
    else:
        kb.button(text="–°–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"user_set_role:user:{user_id}")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="admin_users")
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel_main")
    kb.adjust(2, 1, 1)
    return kb.as_markup()

@router.callback_query(F.data == "admin_users", AdminFilter())
async def manage_users_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel_main").as_markup()
    )
    await state.set_state(AdminUserState.waiting_for_user_identifier)
    await callback.answer()

@router.message(AdminUserState.waiting_for_user_identifier, AdminFilter())
async def find_user_by_identifier(message: types.Message, state: FSMContext):
    identifier = message.text.strip()
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ BackendAPI –±—É–¥–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await backend.find_user(identifier)
        if not user_data:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                                 reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users").as_markup())
            return

        user_id = user_data.get("id")
        role = user_data.get("role", "user")

        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"**ID:** `{user_data.get('id')}`\n"
            f"**Chat ID:** `{user_data.get('chat_id')}`\n"
            f"**–ù–∏–∫–Ω–µ–π–º:** `{user_data.get('nickname')}`\n"
            f"**–†–æ–ª—å:** `{role.upper()}`\n"
            f"**–ì–µ–Ω–µ—Ä–∞—Ü–∏–π:** `{user_data.get('coins')}`\n\n"
            f"**–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:**\n"
            f"  - **–¢–∏–ø:** `{user_data.get('referrer_type')}`\n"
            f"  - **ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:** `{user_data.get('referrer_id')}`\n"
            f"  - **ID —Å—Å—ã–ª–∫–∏:** `{user_data.get('ref_link_id')}`"
        )

        await state.update_data(found_user_id=user_id, current_role=role)
        await message.answer(profile_text, parse_mode="Markdown", reply_markup=user_profile_keyboard(user_id, role))
        await state.set_state(AdminUserState.showing_user_profile)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")


@router.callback_query(F.data.startswith("user_set_role:"), AdminUserState.showing_user_profile, AdminFilter())
async def set_user_role(callback: types.CallbackQuery, state: FSMContext):
    _, role_to_set, user_id_str = callback.data.split(":")

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ BackendAPI –±—É–¥–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        await backend.set_user_role(user_id_str, role_to_set)

        await callback.answer(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_to_set.upper()}", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
        user_data = await backend.get_user_by_id(user_id_str)
        role = user_data.get("role", "user")

        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"**ID:** `{user_data.get('id')}`\n"
            f"**Chat ID:** `{user_data.get('chat_id')}`\n"
            f"**–ù–∏–∫–Ω–µ–π–º:** `{user_data.get('nickname')}`\n"
            f"**–†–æ–ª—å:** `{role.upper()}`\n"
            f"**–ì–µ–Ω–µ—Ä–∞—Ü–∏–π:** `{user_data.get('coins')}`\n\n"
            f"**–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:**\n"
            f"  - **–¢–∏–ø:** `{user_data.get('referrer_type')}`\n"
            f"  - **ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:** `{user_data.get('referrer_id')}`\n"
            f"  - **ID —Å—Å—ã–ª–∫–∏:** `{user_data.get('ref_link_id')}`"
        )

        await state.update_data(found_user_id=user_id_str, current_role=role)
        await callback.message.edit_text(profile_text, parse_mode="Markdown", reply_markup=user_profile_keyboard(user_id_str, role))

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏: {e}", show_alert=True)