from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.api import BackendAPI
from bot.routers.admin import AdminFilter
from config import ENV

router = Router()
backend = BackendAPI(ENV().bot_api_token)

class PartnerLinkState(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_percent = State()
    waiting_for_comment = State()

def partner_percent_keyboard():
    kb = InlineKeyboardBuilder()
    for i in range(10, 51, 10):
        kb.button(text=f"{i}%", callback_data=f"partner_set_percent:{i}")
    kb.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_partners")
    kb.adjust(5, 1)
    return kb.as_markup()

@router.callback_query(F.data == "admin_partners", AdminFilter())
async def manage_partners_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ Chat ID), –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É:",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel_main").as_markup()
    )
    await state.set_state(PartnerLinkState.waiting_for_user_id)
    await callback.answer()

@router.message(PartnerLinkState.waiting_for_user_id, AdminFilter())
async def partner_user_id_received(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è UUID
    if len(user_id) != 36:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(partner_user_id=user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:", reply_markup=partner_percent_keyboard())
    await state.set_state(PartnerLinkState.waiting_for_percent)

@router.callback_query(F.data.startswith("partner_set_percent:"), PartnerLinkState.waiting_for_percent, AdminFilter())
async def partner_percent_received(callback: types.CallbackQuery, state: FSMContext):
    percent = int(callback.data.split(":")[1])
    await state.update_data(percent=percent)

    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–º–ø–∞–Ω–∏—è –≤ VK'):")
    await state.set_state(PartnerLinkState.waiting_for_comment)
    await callback.answer()

@router.message(PartnerLinkState.waiting_for_comment, AdminFilter())
async def partner_comment_received(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    user_id = data.get("partner_user_id")
    percent = data.get("percent")

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ BackendAPI –±—É–¥–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
        link_data = await backend.create_partner_link(user_id, percent, comment)

        link_url = f"https://t.me/{ENV().BOT_USERNAME}?start={link_data.get('token')}"

        await message.answer(
            f"‚úÖ **–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"**–í–ª–∞–¥–µ–ª–µ—Ü:** `{user_id}`\n"
            f"**–ü—Ä–æ—Ü–µ–Ω—Ç:** `{percent}%`\n"
            f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** `{comment}`\n\n"
            f"üîó **–°—Å—ã–ª–∫–∞:**\n`{link_url}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardBuilder().button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel_main").as_markup()
        )
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
        await state.clear()