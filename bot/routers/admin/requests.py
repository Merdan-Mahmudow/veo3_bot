from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.api import BackendAPI
from .filters import AdminFilter
from config import ENV

router = Router()
backend = BackendAPI(ENV().bot_api_token)


def requests_main_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ù–∞ –≤—ã–ø–ª–∞—Ç—É", callback_data="admin_req_payouts")
    kb.button(text="üîó –ù–∞ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="admin_req_links") # –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel_main")
    kb.adjust(2, 1)
    return kb.as_markup()

@router.callback_query(F.data == "admin_requests", AdminFilter())
async def manage_requests_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=requests_main_keyboard()
    )
    await callback.answer()

def payout_requests_keyboard(requests: list):
    kb = InlineKeyboardBuilder()
    for req in requests:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        kb.button(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (ID: {req['id'][:8]})", callback_data=f"payout_approve:{req['id']}")
        kb.button(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (ID: {req['id'][:8]})", callback_data=f"payout_reject:{req['id']}")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_req_payouts")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_requests")
    kb.adjust(2) # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    kb.adjust(1, 1) # –ö–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥" –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥—É
    return kb.as_markup()

@router.callback_query(F.data == "admin_req_payouts", AdminFilter())
async def list_payout_requests(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'requested'
        requests = await backend.get_payout_requests("requested")

        if not requests:
            await callback.message.edit_text(
                "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–µ—Ç.",
                reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_requests").as_markup()
            )
            await callback.answer()
            return

        message_text = "üí∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:**\n\n"
        for req in requests:
            amount_rub = req['amount_minor'] / 100
            message_text += (
                f"**ID:** `{req['id']}`\n"
                f"**–ü–∞—Ä—Ç–Ω–µ—Ä ID:** `{req['partner_id']}`\n"
                f"**–°—É–º–º–∞:** `{amount_rub:.2f} RUB`\n"
                f"**–†–µ–∫–≤–∏–∑–∏—Ç—ã:** `{req['requisites_json']}`\n"
                f"**–î–∞—Ç–∞:** `{req['created_at']}`\n"
                f"-------------------\n"
            )

        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=payout_requests_keyboard(requests)
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}", show_alert=True)


@router.callback_query(F.data.startswith("payout_approve:"), AdminFilter())
async def approve_payout_request(callback: types.CallbackQuery, state: FSMContext):
    request_id = callback.data.split(":")[1]
    try:
        await backend.approve_payout_request(request_id)
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        await list_payout_requests(callback, state)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}", show_alert=True)


@router.callback_query(F.data.startswith("payout_reject:"), AdminFilter())
async def reject_payout_request(callback: types.CallbackQuery, state: FSMContext):
    request_id = callback.data.split(":")[1]
    try:
        await backend.reject_payout_request(request_id)
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await list_payout_requests(callback, state)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "admin_req_links", AdminFilter())
async def list_link_requests(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–†–∞–∑–¥–µ–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)