import logging
from aiogram import F, Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.api import BackendAPI
from config import ENV

router = Router()
env = ENV()
backend = BackendAPI(env.bot_api_token)


def referral_user_keyboard(link: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"copy_link:{link}")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.adjust(1)
    return kb.as_markup()

def partner_cabinet_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="payout_request")
    kb.button(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="partner_links")
    kb.button(text="‚ûï –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="request_new_link")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start_back")
    kb.adjust(2, 1, 1)
    return kb.as_markup()

async def _show_admin_panel(callback: types.CallbackQuery):
    """Helper function to render the admin panel with pending payout requests."""
    try:
        requests = await backend.list_payout_requests(
            actor_chat_id=str(callback.from_user.id),
            status="requested"
        )

        text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:</b>\n"
        kb = InlineKeyboardBuilder()

        if not requests:
            text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É."
        else:
            for i, req in enumerate(requests, 1):
                payout_id = req.get('id')
                amount = req.get('amount_minor', 0) / 100
                partner_id_short = req.get('partner_id', 'N/A')[:8]
                requisites = req.get('requisites_json', {}).get('details', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')

                text += (
                    f"\n\n‚ûñ‚ûñ‚ûñ <b>–ó–∞—è–≤–∫–∞ #{i}</b> ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>ID:</b> <code>{payout_id}</code>\n"
                    f"<b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> <code>{partner_id_short}</code>\n"
                    f"<b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
                    f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {requisites}"
                )

                approve_data = f"payout_approve:{payout_id}"
                reject_data = f"payout_reject:{payout_id}"

                kb.button(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{i}", callback_data=approve_data)
                kb.button(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{i}", callback_data=reject_data)

        # Adjust all approve/reject pairs to be on their own row
        kb.adjust(2)

        kb.row(types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin_create_link"))
        kb.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_panel_refresh"))
        kb.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="start_back"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

    except Exception as e:
        logging.error(f"Failed to load admin panel for {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=partner_cabinet_keyboard())


@router.callback_query(F.data == "referral_program")
async def referral_program_entry(callback: types.CallbackQuery):
    """
    Handles the entry point for the referral program section.
    Displays different information based on the user's role.
    """
    await callback.answer()
    chat_id = callback.from_user.id

    try:
        user = await backend.get_user(chat_id)
        user_role = user.get("role")
        user_id = user.get("id")

        if user_role == "partner":
            stats = await backend.get_partner_stats(user_id)
            regs = stats.get("registrations_count", 0)
            commission = stats.get("total_commission_minor", 0) / 100

            text = (
                "**–ö–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞**\n\n"
                f"üìà –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º: **{regs}**\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏: **{commission:,.2f} ‚ÇΩ**"
            )
            await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=partner_cabinet_keyboard())
        elif user_role == "admin":
             await _show_admin_panel(callback)
        else: # Default to 'user' role
            links = await backend.get_user_links(user_id)
            user_link_obj = next((link for link in links if link.get("link_type") == "user"), None)

            if user_link_obj:
                bot_username = (await callback.bot.get_me()).username
                ref_link = f"https://t.me/{bot_username}?start={user_link_obj['token']}"

                text = (
                    "‚ú® **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞**\n\n"
                    "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ—Å–ª–µ –µ–≥–æ **–ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏** –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ **1 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**!\n\n"
                    f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{ref_link}`"
                )
                await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=referral_user_keyboard(ref_link))
            else:
                await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=partner_cabinet_keyboard())

    except Exception as e:
        logging.error(f"Failed to show referral program for user {chat_id}: {e}")
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=partner_cabinet_keyboard())


from aiogram.fsm.context import FSMContext
from bot.fsm import PayoutState, CreatePartnerLinkState
from api.models.referral import LinkType

@router.callback_query(F.data.startswith("copy_link:"))
async def copy_link_handler(callback: types.CallbackQuery):
    """
    Handles the 'Copy link' button press, simply informs the user.
    """
    link = callback.data.split(":", 1)[1]
    await callback.answer(text=f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n{link}", show_alert=True)


# --- Admin Panel ---

@router.callback_query(F.data == "admin_panel")
async def admin_panel_entry(callback: types.CallbackQuery):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")
    await _show_admin_panel(callback)

@router.callback_query(F.data == "admin_panel_refresh")
async def admin_panel_refresh(callback: types.CallbackQuery):
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    await _show_admin_panel(callback)

@router.callback_query(F.data.startswith("payout_approve:"))
async def approve_payout(callback: types.CallbackQuery):
    payout_id = callback.data.split(":", 1)[1]
    try:
        await backend.update_payout_status(
            payout_id=payout_id,
            actor_chat_id=str(callback.from_user.id),
            new_status="approved"
        )
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.", show_alert=False)
        await _show_admin_panel(callback)
    except Exception as e:
        logging.error(f"Failed to approve payout {payout_id} by {callback.from_user.id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data.startswith("payout_reject:"))
async def reject_payout(callback: types.CallbackQuery):
    payout_id = callback.data.split(":", 1)[1]
    try:
        await backend.update_payout_status(
            payout_id=payout_id,
            actor_chat_id=str(callback.from_user.id),
            new_status="rejected"
        )
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", show_alert=False)
        await _show_admin_panel(callback)
    except Exception as e:
        logging.error(f"Failed to reject payout {payout_id} by {callback.from_user.id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# --- Payout FSM ---

@router.callback_query(F.data == "payout_request")
async def start_payout_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PayoutState.waiting_for_amount)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")


@router.message(PayoutState.waiting_for_amount)
async def process_payout_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500).")
        return

    await state.update_data(amount_minor=amount * 100)
    await state.set_state(PayoutState.waiting_for_requisites)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞).")


@router.message(PayoutState.waiting_for_requisites)
async def process_payout_requisites(message: types.Message, state: FSMContext):
    requisites_text = message.text
    if not requisites_text:
        await message.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö.")
        return

    data = await state.get_data()
    amount_minor = data.get("amount_minor")

    try:
        user = await backend.get_user(message.from_user.id)
        partner_id = user.get("id")

        await backend.create_payout_request(
            partner_id=partner_id,
            amount_minor=amount_minor,
            requisites={"details": requisites_text}
        )
        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        logging.error(f"Failed to create payout request for user {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    finally:
        await state.clear()


# --- Admin side of Link Request ---

@router.callback_query(F.data.startswith("link_req_approve:"))
async def approve_link_request(callback: types.CallbackQuery):
    request_id = callback.data.split(":")[1]
    try:
        # Process the request via API
        processed_request = await backend.process_link_request(
            request_id=request_id,
            actor_chat_id=str(callback.from_user.id),
            new_status="approved"
        )

        # Notify the partner
        partner_chat_id = processed_request.get("partner", {}).get("chat_id")
        if partner_chat_id:
            await callback.bot.send_message(
                partner_chat_id,
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
            )

        # Update the admin's message
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω.", show_alert=True)
        await callback.message.edit_text(f"{callback.message.text}\n\n<b>–°—Ç–∞—Ç—É—Å: –û–î–û–ë–†–ï–ù–û</b> ‚úÖ", parse_mode="HTML", reply_markup=None)

    except Exception as e:
        logging.error(f"Failed to approve link request {request_id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data.startswith("link_req_reject:"))
async def reject_link_request(callback: types.CallbackQuery):
    request_id = callback.data.split(":")[1]
    try:
        # Process the request via API
        processed_request = await backend.process_link_request(
            request_id=request_id,
            actor_chat_id=str(callback.from_user.id),
            new_status="rejected"
        )

        # Notify the partner
        partner_chat_id = processed_request.get("partner", {}).get("chat_id")
        if partner_chat_id:
            await callback.bot.send_message(
                partner_chat_id,
                "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )

        # Update the admin's message
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=True)
        await callback.message.edit_text(f"{callback.message.text}\n\n<b>–°—Ç–∞—Ç—É—Å: –û–¢–ö–õ–û–ù–ï–ù–û</b> ‚ùå", parse_mode="HTML", reply_markup=None)

    except Exception as e:
        logging.error(f"Failed to reject link request {request_id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# --- Link Request FSM (Partner side) ---

def link_percentage_keyboard():
    kb = InlineKeyboardBuilder()
    percentages = [10, 20, 30, 40, 50]
    for p in percentages:
        kb.button(text=f"{p}%", callback_data=f"link_req_percent:{p}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_link_request")
    kb.adjust(5, 1)
    return kb.as_markup()

@router.callback_query(F.data == "request_new_link")
async def start_link_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(LinkRequestState.waiting_for_percentage)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:",
        reply_markup=link_percentage_keyboard()
    )

@router.callback_query(LinkRequestState.waiting_for_percentage, F.data.startswith("link_req_percent:"))
async def process_link_percentage(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    percent = int(callback.data.split(":")[1])
    await state.update_data(percentage=percent)
    await state.set_state(LinkRequestState.waiting_for_comment)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–º–ø–∞–Ω–∏—è –≤ VK').")

@router.callback_query(F.data == "cancel_link_request", FSMContext)
async def cancel_link_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    # Go back to the main referral menu
    await referral_program_entry(callback)


@router.message(LinkRequestState.waiting_for_comment)
async def process_link_comment(message: types.Message, state: FSMContext):
    comment = message.text
    data = await state.get_data()
    percentage = data.get("percentage")

    try:
        user = await backend.get_user(message.from_user.id)
        partner_id = user.get("id")

        # Create the request in the DB
        link_request = await backend.create_link_request(
            partner_id=partner_id,
            requested_percent=percentage,
            comment=comment
        )

        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

        # Notify admins
        admin_ids = settings.get_admins_chat_id()
        admin_kb = InlineKeyboardBuilder()
        approve_data = f"link_req_approve:{link_request['id']}"
        reject_data = f"link_req_reject:{link_request['id']}"
        admin_kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_data)
        admin_kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=reject_data)

        notification_text = (
            f"‚ö†Ô∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É!\n\n"
            f"–û—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user.get('nickname')} (<code>{message.from_user.id}</code>)\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: <b>{percentage}%</b>\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        )
        for admin_id in admin_ids:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    reply_markup=admin_kb.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.error(f"Failed to send link request notification to admin {admin_id}: {e}")

    except Exception as e:
        logging.error(f"Failed to create link request for partner {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        await state.clear()


from config import Settings
settings = Settings()

# --- Partner Links ---

@router.callback_query(F.data == "partner_links")
async def show_partner_links(callback: types.CallbackQuery):
    await callback.answer()
    try:
        user = await backend.get_user(callback.from_user.id)
        links = await backend.get_user_links(user['id'])

        bot_username = (await callback.bot.get_me()).username
        text = "<b>–í–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏:</b>\n\n"

        partner_links = [link for link in links if link.get("link_type") == "partner"]

        if not partner_links:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫."
        else:
            for link in partner_links:
                ref_url = f"https://t.me/{bot_username}?start={link['token']}"
                text += (
                    f"üîó <code>{ref_url}</code>\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç: <b>{link['percent']}%</b>\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {link.get('comment', 'N/A')}\n\n"
                )

        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="referral_program")
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

    except Exception as e:
        logging.error(f"Failed to show partner links for {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")