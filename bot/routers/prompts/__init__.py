from __future__ import annotations
from typing import List, Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from bot.api import BackendAPI
from bot.routers import prompt_options_kb
from config import ENV
from services.gpt import PromptAI
from bot.fsm import PhotoState, PromptAssistantState

router = Router()
prompt_ai = PromptAI()
env = ENV()
backend = BackendAPI(env.bot_api_token)


@router.callback_query(PromptAssistantState.reviewing, F.data == "prompt_accept")
async def prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accepted = data.get("prompt_last")
    if not accepted:
        await callback.answer("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è", show_alert=True)
        return
    await callback.answer("–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ")
    # –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —Ñ–æ—Ç–æ (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ data['mode'])
    # –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞:
    task = await backend.generate_text(chat_id=str(callback.from_user.id), prompt=accepted)
    await callback.message.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
    await state.clear()

@router.callback_query(PromptAssistantState.reviewing, F.data == "prompt_other")
async def prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief")
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    try:
        suggestion = await backend.suggest_prompt(
            chat_id=str(callback.from_user.id),
            brief=brief,
            clarifications=clar,
            attempt=attempt,
            previous_prompt=last,
            aspect_ratio="16:9",
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        return

    await state.update_data(prompt_last=suggestion, prompt_attempt=attempt)
    await callback.message.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await callback.answer("–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!")

@router.callback_query(PromptAssistantState.reviewing, F.data == "prompt_edit")
async def prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å:")
    await state.set_state(PromptAssistantState.editing)  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–æ–∫

@router.message(PromptAssistantState.editing)
async def prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å—Ç–∏.")
        return
    data = await state.get_data()
    brief = data.get("prompt_brief")
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    attempt = int(data.get("prompt_attempt", 1)) + 1
    last = data.get("prompt_last")

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫
    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        aspect_ratio="16:9",
    )
    await state.update_data(prompt_clarifications=clar, prompt_last=suggestion, prompt_attempt=attempt)
    await message.answer(
        f"{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await state.set_state(PromptAssistantState.reviewing)

@router.callback_query(PromptAssistantState.reviewing, F.data == "prompt_reject")
async def prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.message.answer("–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")



# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ ---
@router.callback_query(F.data == "generate_photo")
async def start_photo_flow(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–≤ –ø–æ–¥–ø–∏—Å–∏), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç.")
    await state.set_state(PhotoState.waiting_photo)

# --- –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ---
@router.message(PhotoState.waiting_photo)
async def handle_photo_input(message: types.Message, state: FSMContext):
    if not message.photo or not message.caption:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å—é–∂–µ—Ç.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Ñ–∞–π–ª–∞ (–∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã)
    file_id = message.photo[-1].file_id
    brief = message.caption.strip()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        photo_file_id=file_id,
        prompt_brief=brief,
        prompt_attempt=1,
        prompt_last=None,
        prompt_clarifications=[],
        mode="photo"
    )

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞
    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=brief,
        clarifications=None,
        attempt=1,
        previous_prompt=None,
        aspect_ratio="16:9",
    )

    await state.update_data(prompt_last=suggestion)
    await message.answer(
        f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n{suggestion}",
        reply_markup=prompt_options_kb()
    )
    await state.set_state(PhotoState.reviewing)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ reviewing ---
@router.callback_query(PhotoState.reviewing, F.data == "prompt_accept")
async def photo_prompt_accept(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt_text = data.get("prompt_last")
    file_id = data.get("photo_file_id")
    if not prompt_text or not file_id:
        await callback.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ üé¨")

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥
    try:
        # –ø–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ aiogram
        file = await callback.bot.get_file(file_id)
        file_bytes = await callback.bot.download_file(file.file_path)
        image_ext = ".jpg"
        task = await backend.generate_photo(
            chat_id=str(callback.from_user.id),
            prompt=prompt_text,
            image_bytes=file_bytes.getvalue(),
            image_ext=image_ext,
        )
        await callback.message.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task['task_id']}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ: %s", e)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
    finally:
        await state.clear()

@router.callback_query(PhotoState.reviewing, F.data == "prompt_other")
async def photo_prompt_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    brief = data.get("prompt_brief", "")
    clar = data.get("prompt_clarifications", [])
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    suggestion = await backend.suggest_prompt(
        chat_id=str(callback.from_user.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        aspect_ratio="16:9",
    )
    await state.update_data(prompt_last=suggestion, prompt_attempt=attempt)
    await callback.message.edit_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt}:\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await callback.answer("–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!")

@router.callback_query(PhotoState.reviewing, F.data == "prompt_edit")
async def photo_prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–ø—Ä–æ—Å—É:")
    await state.set_state(PhotoState.editing)

@router.message(PhotoState.editing)
async def photo_prompt_receive_edit(message: types.Message, state: FSMContext):
    edit = (message.text or "").strip()
    if not edit:
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É.")
        return
    data = await state.get_data()
    brief = data.get("prompt_brief", "")
    clar = data.get("prompt_clarifications", [])
    clar.append(edit)
    last = data.get("prompt_last")
    attempt = int(data.get("prompt_attempt", 1)) + 1

    suggestion = await backend.suggest_prompt(
        chat_id=str(message.chat.id),
        brief=brief,
        clarifications=clar,
        attempt=attempt,
        previous_prompt=last,
        aspect_ratio="16:9",
    )
    await state.update_data(prompt_clarifications=clar, prompt_last=suggestion, prompt_attempt=attempt)
    await message.answer(
        f"–í–∞—Ä–∏–∞–Ω—Ç #{attempt} (—Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–æ–∫):\n\n{suggestion}",
        reply_markup=prompt_options_kb(),
    )
    await state.set_state(PhotoState.reviewing)

@router.callback_query(PhotoState.reviewing, F.data == "prompt_reject")
async def photo_prompt_reject(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer("–ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
